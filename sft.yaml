enable_liger_kernel: true # works with FSDP
use_reentrant_gc: true
disable_shuffling: true

#ignore_data_skip: true
#resume_from_checkpoint: /home/exported/checkpoint-4115

model_name_or_path: NousResearch/Meta-Llama-3.1-8B-Instruct
quantization_bit: 4
double_quantization: false

stage: sft
do_train: true
finetuning_type: lora
lora_target: all
# additional_target: embed_tokens,lm_head
lora_rank: 64
lora_alpha: 16
lora_dropout: 0.1
use_rslora: true

dataset: x1
template: llama3
packing: true
neat_packing: true
cutoff_len: 16384 # 8192 | 16384 | 24576 | 32768 
preprocessing_num_workers: 64

num_train_epochs: 2
per_device_train_batch_size: 1
gradient_accumulation_steps: 4
lr_scheduler_type: constant_with_warmup # constant | constant_with_warmup | linear | cosine
optim: adamw_torch_fused # adamw_torch | adamw_8bit | adamw_torch_fused
learning_rate: 0.00005
# embedding_learning_rate: 1e-5
weight_decay: 0.05
warmup_steps: 50

output_dir: /home/exported
logging_steps: 1
save_steps: 1000

bf16: true
flash_attn: fa2
gradient_checkpointing: true
max_grad_norm: 0.5
ddp_timeout: 180000000
ddp_find_unused_parameters: false
overwrite_cache: true
overwrite_output_dir: true

#use_dora: true
# use_fast_tokenizer: false
# loraplus_lr_ratio: 4.0
# use_reentrant: true
# warmup_ratio: 0.1
# plot_loss: false
# min_lr: 0.00002

#gradient_checkpointing_kwargs:
#  use_reentrant: false

### eval
# val_size: 0 # 0.1
# per_device_eval_batch_size: 1
# evaluation_strategy: steps
# eval_steps: 0 # 500

# Train with Continuous PreTraining [ embed_tokens + lm_head ]
# https://www.reddit.com/r/LocalLLaMA/comments/1d86k5y/continued_pretraining_2x_faster_notebook_to/
# all == q_proj,k_proj,v_proj,o_proj,gate_proj,up_proj,down_proj
# additional_target: lm_head,embed_tokens
# [ lm_head ] with [ liger_kernel ] RuntimeError: size mismatch, got input (1), mat (1x4096), vec (65667072)

# Continued Pretraining with Unsloth
# https://unsloth.ai/blog/contpretraining
# embedding_learning_rate

# Unsloth
#use_unsloth: true # just for ONE card
#use_unsloth_gc: true # use unsloth's gradient checkpointing
#upcast_layernorm: true # FSDP: Must flatten tensors with uniform dtype
#upcast_lmhead_output: true